import csv
from flask import Flask, render_template, request, jsonify

app = Flask(__name__)

def load_crypto_data():
    crypto_data = {}
    with open(r"C:\Users\Evangelos\Desktop\Prices.csv") as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            company_name = row['Company Name']
            company_symbol = row['Company Symbol']
            crypto_price = row['Price']
            market_cap = row["Market Cap"]
            token_supply = row["Token Supply"]
            crypto_data[company_name] = (crypto_price, company_symbol, market_cap, token_supply)
    return crypto_data

# Funktion mit der eine beliebige Kryptowährung gesucht werden kann
@app.route("/get-stock/<symbol>")
def get_stock(symbol):
    crypto_data = load_crypto_data()
    if symbol in crypto_data:
        return jsonify({
            "price": crypto_data[symbol][0],
            "symbol": crypto_data[symbol][1],
            "market_cap": crypto_data[symbol][2],
            "token_supply": crypto_data[symbol][3]
        })
    else:
        return jsonify({"error": "Stock not found"})

# Code um eine Preis- und Marktkapitalisierungsgrenze zu setzen.
@app.route("/get-cryptolist")
def get_cryptolist():
    crypto_data = load_crypto_data()
    price_above = float(request.args.get('price_above'))
    market_cap_above = float(request.args.get('market_cap_above', 0))
    filtered_crypto = {company: data for company,
            data in crypto_data.items()
            if float(data[0]) > price_above and (market_cap_above == 0 or float(data[1]) > market_cap_above)}
    return jsonify(filtered_crypto)

# Code um eine Rangliste vom höchsten bis zum niedrigsten Preis zu erstellen
@app.route("/get-ranks")
def price_rank():
    crypto_data = load_crypto_data()
    crypto_prices = [(name, float(data[0])) for name, data in crypto_data.items()]
    sorted_prices = sorted(crypto_prices, key=lambda x: x[1], reverse=True)
    ranked_crypto = {}
    for rank, (name, price) in enumerate(sorted_prices, start=1):
        ranked_crypto[name] = {
            'Rank': rank,
            'Symbol': crypto_data[name][1],
            'Price': price,
            }
    return jsonify(ranked_crypto)

if __name__ == '__main__':
    app.run(debug=True)
